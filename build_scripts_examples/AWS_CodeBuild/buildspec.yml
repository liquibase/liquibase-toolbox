###
### This sample pipeline is intended as a starting point for integration between Liquibase Secure (formerly Liquibase Pro) and AWS CodeBuild pipelines
### Review and update prior to use
###
### Liquibase version: 5.00.0+
###
### Get Liquibase: https://www.liquibase.com/download-secure
### Liquibase sales: https://www.liquibase.com/contact-us
### Liquibase support: https://support.liquibase.com
### 

### 
### Prior to running the following files must exist in repository:
###
### 1. liquibase.flowfile.yaml
###    Liquibase flow file
###    https://docs.liquibase.com/secure/user-guide-5-0/what-is-a-flow-file
###
### 2. liquibase.checks-settings.conf
###    Liquibase policy checks configuration file
###    https://docs.liquibase.com/secure/user-guide-5-0/use-checks-settings-file
###
### 3. changelog.main.xml
###    Root Liquibase changelog file
###    https://docs.liquibase.com/secure/user-guide-5-0/what-is-a-changelog
###

###
### AWS CodeBuild documentation: https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html
###

version: 0.2

env:
###
### Set Liquibase environment variables
###
  variables:
    LB_ENVIRONMENT: "DEV"
    LIQUIBASE_COMMAND_CHANGELOG_FILE: "changelog.main.xml"
  secrets-manager:
###
### Use DockerHub credentials to bypass anonymous pull limits
### https://docs.docker.com/docker-hub/download-rate-limit
###
    DOCKERHUB_USERNAME: "DOCKERHUB_USERNAME:DOCKERHUB_USERNAME"
    DOCKERHUB_PASSWORD: "DOCKERHUB_PASSWORD:DOCKERHUB_PASSWORD"
###
### These values should be pulled from AWS Secrets Manager
### Secrets should include LIQUIBASE_COMMAND_URL, LIQUIBASE_COMMAND_USERNAME, LIQUIBASE_COMMAND_PASSWORD, LIQUIBASE_LICENSE_KEY
### Ensure user can access secrets from IAM Management Console
###
    LIQUIBASE_COMMAND_URL: "LIQUIBASE_DEV_URL:LIQUIBASE_DEV_URL"
    LIQUIBASE_COMMAND_USERNAME: "LIQUIBASE_DEV_USER:LIQUIBASE_DEV_USER"
    LIQUIBASE_COMMAND_PASSWORD: "LIQUIBASE_DEV_PASSWORD:LIQUIBASE_DEV_PASSWORD"
    LIQUIBASE_LICENSE_KEY: "LIQUIBASE_KEY:LIQUIBASE_KEY"
###
### This pipeline uses a GitHub repository
###
  git-credential-helper: yes

phases:
  pre_build:
###
### Use DockerHub credentials to bypass anonymous pull limits
### https://docs.docker.com/docker-hub/download-rate-limit
###
    commands:
      - echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin
###
### Ensure liquibase user can update files
###
      - chmod 666 $CODEBUILD_SRC_DIR/*_$(LB_ENVIRONMENT).json

  build:
    on-failure: ABORT
    commands:
###
### Run the Liquibase flowfile
### Liquibase should be installed where your agents run or invoked via Docker
###
      - docker run --env LIQUIBASE_SEARCH_PATH=/liquibase/changelog --env LB_BASE_DIR=/liquibase/changelog --env LIQUIBASE_COMMAND_USERNAME --env LIQUIBASE_COMMAND_PASSWORD --env LIQUIBASE_COMMAND_URL --env LIQUIBASE_LICENSE_KEY --env LIQUIBASE_COMMAND_CHANGELOG_FILE --env LB_ENVIRONMENT --rm -v $CODEBUILD_SRC_DIR:/liquibase/changelog liquibase/liquibase-secure:latest flow --flow-file=liquibase.flowfile.yaml

  post_build:
    commands:
###
### Update respository
###
      - git config user.name codebuild-actions
      - git config user.email codebuild-actions@aws.com
      - git add .
      - git commit -m "Update repository"
      - git push --force