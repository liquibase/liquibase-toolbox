###
### This sample pipeline is intended as a starting point for integration between Liquibase Secure (formerly Liquibase Pro) and CircleCI pipelines
### Review and update prior to use
###
### Liquibase version: 5.00.0+
###
### Get Liquibase: https://www.liquibase.com/download-secure
### Liquibase sales: https://www.liquibase.com/contact-us
### Liquibase support: https://support.liquibase.com
###

### 
### Prior to running the following files must exist in repository:
###
### 1. liquibase.flowfile.yaml
###    Liquibase flow file
###    https://docs.liquibase.com/secure/user-guide-5-0/what-is-a-flow-file
###
### 2. liquibase.checks-settings.conf
###    Liquibase policy checks configuration file
###    https://docs.liquibase.com/secure/user-guide-5-0/use-checks-settings-file
###
### 3. changelog.main.xml
###    Root Liquibase changelog file
###    https://docs.liquibase.com/secure/user-guide-5-0/what-is-a-changelog
###

###
### CircleCI documentation: https://circleci.com/docs/
###

version: 2.1
 
###
### Pipelines can be triggered manually or via events
### This pipeline will only run if "skip_deploy" parameter is false (used for testing only)
###
parameters:
  skip_deploy:
    type: boolean
    default: true

jobs:
  liquibase-job:
    machine:
      image: ubuntu-2204:current
    
    environment:
###
### Set Liquibase environment variables
###
      LB_ENVIRONMENT: DEV
      LIQUIBASE_COMMAND_CHANGELOG_FILE: changelog.main.xml

    steps:
      - checkout
###
### These should be pulled from environment variables or vault
### Secrets should include LIQUIBASE_COMMAND_URL, LIQUIBASE_COMMAND_USERNAME, LIQUIBASE_COMMAND_PASSWORD, LIQUIBASE_LICENSE_KEY
###
### The secrets Liquibase requires could also be set directly using pipeline environment variables
### i.e., instead of of assigning LIQUIBASE_COMMAND_URL the value of LB_DEV_URL, use a pipeline environment variable named LIQUIBASE_COMMAND_URL
###
      - run:
          name: Setup Environment Variables
          command: |
            echo 'export LIQUIBASE_COMMAND_URL="$LB_DEV_URL"' >> "$BASH_ENV"
            echo 'export LIQUIBASE_COMMAND_USERNAME="$LB_DEV_USER"' >> "$BASH_ENV"
            echo 'export LIQUIBASE_COMMAND_PASSWORD="$LB_DEV_PASSWORD"' >> "$BASH_ENV"
            echo 'export LIQUIBASE_LICENSE_KEY="$LB_KEY"' >> "$BASH_ENV"
###
### Run the Liquibase flowfile
### Liquibase should be installed where your agents run or invoked via Docker
###
      - run:
          name: Running Liquibase
          command: docker run --env LIQUIBASE_SEARCH_PATH=/liquibase/changelog --env LB_BASE_DIR=/liquibase/changelog --env LIQUIBASE_COMMAND_USERNAME --env LIQUIBASE_COMMAND_PASSWORD --env LIQUIBASE_COMMAND_URL --env LIQUIBASE_LICENSE_KEY --env LIQUIBASE_COMMAND_CHANGELOG_FILE --env LB_ENVIRONMENT --rm -v $(pwd):/liquibase/changelog liquibase/liquibase-secure:latest flow --flow-file=liquibase.flowfile.yaml
###
### Update respository
### User key must be created to update the Git repository
###
      - run:
          name: Updating repository
          command: |
            git config user.name circleci-pipeline
            git config user.email circleci-pipeline@circleci.com
            git add .
            git commit -m "[skip ci] Update repository"
            git push --force

workflows:
  liquibase-workflow:
    unless: << pipeline.parameters.skip_deploy >>
    jobs:
      - liquibase-job