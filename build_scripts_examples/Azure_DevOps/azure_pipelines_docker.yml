###
### This sample pipeline is intended as a starting point for integration between Liquibase Pro and Azure DevOps pipelines
### Review and update prior to use
###
### Liquibase version: 4.30.0+
###
### Liquibase sales: https://www.liquibase.com/contact-us
### Liquibase support: https://support.liquibase.com
### 

### 
### Prior to running the following files must exist in repository
###
### 1. liquibase.flowfile.yaml
###    Liquibase flow file
###    https://docs.liquibase.com/commands/flow/flow.html
###
### 2. liquibase.checks-settings.conf
###    Liquibase policy checks configuration file
###    https://docs.liquibase.com/liquibase-pro/policy-checks/home.html
###
### 3. changelog.main.xml
###    Root Liquibase changelog file
###    https://docs.liquibase.com/concepts/changelogs/home.html
###

###
### Azure pipelines documentation: https://aka.ms/yaml
###

###
### Pipelines can be triggered manually or via events
###
trigger: none

###
### Set Liquibase environment variables
###
variables:
  LB_ENVIRONMENT: DEV
  LIQUIBASE_COMMAND_CHANGELOG_FILE: changelog.main.xml

###
### Utilizes a local Linux agent with git and docker available
### https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/agents?view=azure-devops&tabs=browser
###
stages:
- stage: Liquibase
  pool:
    name: Default
    demands:
    - agent.name -equals Liquibase
  jobs:
  - job: Liquibase
    workspace:
      clean: all
    steps:
###
### Checkout repository
###
    - checkout: self

###
### Ensure liquibase user can update files
###
    - script: |
        chmod 666 $(pwd)/*_$(LB_ENVIRONMENT).json
      displayName: 'Updating permissions'
###
### Run the Liquibase flowfile
### Liquibase should be installed where your agents run or invoked via Docker
###
    - script: |
        docker run --env LIQUIBASE_SEARCH_PATH=/liquibase/changelog --env LB_BASE_DIR=/liquibase/changelog --env LIQUIBASE_COMMAND_USERNAME --env LIQUIBASE_COMMAND_PASSWORD --env LIQUIBASE_COMMAND_URL --env LIQUIBASE_LICENSE_KEY --env LIQUIBASE_COMMAND_CHANGELOG_FILE --env LB_ENVIRONMENT --rm -v $(pwd):/liquibase/changelog liquibase:latest flow --flow-file=liquibase.flowfile.yaml
###
### These values should be pulled from pipeline variables or vault
### https://learn.microsoft.com/en-us/azure/devops/pipelines/process/set-secret-variables?view=azure-devops&tabs=yaml%2Cbash
### Secrets should include LIQUIBASE_COMMAND_URL, LIQUIBASE_COMMAND_USERNAME, LIQUIBASE_COMMAND_PASSWORD, LIQUIBASE_LICENSE_KEY
###
      env: 
        LIQUIBASE_COMMAND_URL: $(LIQUIBASE_DEV_URL)
        LIQUIBASE_COMMAND_USERNAME: $(LIQUIBASE_DEV_USER)
        LIQUIBASE_COMMAND_PASSWORD: $(LIQUIBASE_DEV_PASSWORD)
        LIQUIBASE_LICENSE_KEY: $(LIQUIBASE_KEY)
      displayName: 'Running Liquibase'
###
### Update to your project repository
###
    - script: |
        git switch -c main
        git remote set-url origin https://$LIQUIBASE_GITHUB_TOKEN@github.com/liquibase/liquibase-toolbox.git
        git config user.name ado-pipelines
        git config user.email ado-pipelines@microsoft.com
        git add .
        git commit -am "Update repository"
        git push -u origin main --force
      env: 
        LIQUIBASE_GITHUB_TOKEN: $(LIQUIBASE_REPO_TOKEN)
      displayName: 'Updating repository'
