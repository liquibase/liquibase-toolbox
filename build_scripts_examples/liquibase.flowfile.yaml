###
### This flowfile is intended to highlight capabilities of Liquibase Pro
### Review and update prior to use
###
### Liquibase version: 4.26.0+
###
### Liquibase sales: https://www.liquibase.com/contact-us
### Liquibase support: https://support.liquibase.com/knowledge
###

### 
### Prior to running the following files must exist in repository
###
### 1. liquibase.flowfile.yaml
###    This flow file
###    https://docs.liquibase.com/commands/flow/flow.html
###
### 2. liquibase.checks-settings.conf
###    Liquibase quality checks configuration file
###    https://docs.liquibase.com/commands/quality-checks/home.html
###
### 3. changelog.main.xml
###    Root Liquibase changelog file
###    https://docs.liquibase.com/concepts/changelogs/home.html
###

###
### Global variables used in the flowfile
###
globalVariables:
  ###
  ### These variables are typically set via automation tools (see pipeline examples)
  ###
  ### LIQUIBASE_SEARCH_PATH: REQUIRED
  ### Use absolute paths when using Liquibase's Docker container
  ### LIQUIBASE_SEARCH_PATH: "/liquibase/changelog"
  ###
  ### LIQUIBASE_COMMAND_CHANGELOG_FILE: REQUIRED
  ### Root Liquibase changelog file
  ### LIQUIBASE_COMMAND_CHANGELOG_FILE: "changelog.main.xml"
  ###
  ### LIQUIBASE_COMMAND_TAG: REQUIRED
  ### Should be a unique identifier e.g. job/build number
  ### LIQUIBASE_COMMAND_TAG: "12345"
  ###
  ### LB_BASE_DIR: REQUIRED
  ### The directory to write outputs from Liquibase
  ### LB_BASE_DIR: "/liquibase/changelogs"
  ###
  ### LB_ENVIRONMENT: REQUIRED
  ### LB_ENVIRONMENT should be the environment within the pipeline to operate on (e.g., DEV, UAT, PROD)
  ### LB_ENVIRONMENT: "DEV"
  ###
  ### Secrets: REQUIRED
  ### These values should be pulled from a secure vault via pipeline or Liquibase Pro extension
  ### https://docs.liquibase.com/tools-integrations/extensions/secrets-management/home.html
  ###
  ### LIQUIBASE_COMMAND_URL: "jdbc:h2:tcp://localhost:9090/mem:dev"
  ### LIQUIBASE_COMMAND_USERNAME: "dbuser"
  ### LIQUIBASE_COMMAND_PASSWORD: "letmein"
  ### LIQUIBASE_LICENSE_KEY: "12345"
  ###
  ### Structured logging
  ### Liquibase logs can be ingested by any standard observability tool (e.g., CloudWatch, Datadog, Elastic, Splunk)
  ### https://docs.liquibase.com/tools-integrations/observability/structured-logging.html
  ###
  ### LIQUIBASE_LOG_FILE: "liquibase.log.json"
  ### LIQUIBASE_LOG_FORMAT: "json"
  ### LIQUIBASE_LOG_LEVEL: "warning"
  ### LIQUIBASE_MIRROR_CONSOLE_MESSAGES_TO_LOG: "false"
  ###
  ### Other settings
  ### LIQUIBASE_COMMAND_CHECKS_RUN_CHECKS_OUTPUT: "issues"
  ### LIQUIBASE_SHOW_BANNER: "false"
  ###
  ### Files
  ###
  DIFF_FILE: "Diff_${LB_ENVIRONMENT}.json"
  SNAPSHOT_FILE: "Snapshot_${LB_ENVIRONMENT}.json"
  ###
  ### Operation Reports
  ### Liquibase Pro creates reports for certain operations
  ### These reports can be copied to a shared location for distribution
  ### https://docs.liquibase.com/tools-integrations/observability/operation-reports.html
  ###
  CHECKS_REPORT: "Checks_${LB_ENVIRONMENT}.html"
  DRIFT_REPORT: "Diff_${LB_ENVIRONMENT}.html"
  UPDATE_REPORT: "Update_${LB_ENVIRONMENT}.html"
  ###
  ### Workflow features
  ### Set these flags to T/F to turn Liquibase Pro features on/off
  ### These flags can also be set dynamically by an automation tool based on user input, environment, team, etc.
  ### 
  LB_TEST_CHECKS: "T"
  LB_TEST_DRIFT: "T"
  LB_TEST_ROLLBACKS: "T"

###
### Stages to execute
###
stages:
  Default:
    actions:
      #
      # Validate database connection (future)
      #
      # - type: liquibase
      #   command: connect
      #
      # Validate changelog
      #
      - type: liquibase
        command: validate
      #
      # View pending changes
      #
      - type: liquibase
        command: status
        cmdArgs: { verbose: "true" }
      #
      # Show quality checks
      #
      - type: liquibase
        if: "${LB_TEST_CHECKS} == T"
        command: checks show
      #
      # Run quality checks
      #
      - type: liquibase
        if: "${LB_TEST_CHECKS} == T"
        command: checks run
        cmdArgs: { report-enabled: "true", report-path: "${LB_BASE_DIR}", report-name: "${CHECKS_REPORT}", checks-scope: "changelog, database" }
      #
      # Run diff and check for drift
      # Update referenceURL database type in cmdArgs (e.g., oracle, mssql, snowflake, etc.)
      #
      - type: liquibase
        if: "exists('${SNAPSHOT_FILE}', false) && ${LB_TEST_DRIFT} == 'T'"
        command: diff
        globalArgs: { outputfile: "${LB_BASE_DIR}/${DIFF_FILE}" }
        cmdArgs: { drift-severity: "1", report-enabled: "true", report-path: "${LB_BASE_DIR}", report-name: "${DRIFT_REPORT}", referenceURL: "offline:snowflake?snapshot=${SNAPSHOT_FILE}", format: json }
      #
      # Tag the database
      #
      - type: liquibase
        command: tag
        cmdArgs: { tag: "${LIQUIBASE_COMMAND_TAG}" }
      #
      # Review pending changes
      #
      - type: liquibase
        command: updateSQL
      #
      # Update the database
      #
      - type: liquibase
        command: update
        cmdArgs: { report-enabled: "true", report-path: "${LB_BASE_DIR}", report-name: "${UPDATE_REPORT}" }
      #
      # Test rollbacks
      # Typically non-production only
      #
      - type: liquibase
        if: "${LB_TEST_ROLLBACKS} == 'T' && !CONTAINS('${LB_ENVIRONMENT}', 'PROD')"
        command: rollbackSQL
        cmdArgs: { tag: "${LIQUIBASE_COMMAND_TAG}" }
      #
      # Test rollbacks
      # Typically non-production only
      #
      - type: liquibase
        if: "${LB_TEST_ROLLBACKS} == 'T' && !CONTAINS('${LB_ENVIRONMENT}', 'PROD')"
        command: rollback
        cmdArgs: { tag: "${LIQUIBASE_COMMAND_TAG}" }
      #
      # Test rollbacks
      # Typically non-production only
      #
      - type: liquibase
        if: "${LB_TEST_ROLLBACKS} == 'T' && !CONTAINS('${LB_ENVIRONMENT}', 'PROD')"
        command: update
      #
      # Create updated snapshot
      #
      - type: liquibase
        command: snapshot
        globalArgs: { outputfile: "${LB_BASE_DIR}/${SNAPSHOT_FILE}" }
        cmdArgs: { snapshotFormat: "json" }

###
### Always execute
###
endStage:
  actions:
    - type: liquibase
      command: history